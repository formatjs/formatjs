// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`basic case 1`] = `
[
  {},
  {
    "a1d12": "I have {count, plural, one{a dog} other{many dogs}}",
    "a1dd2": "my name is {name}",
    "ashd2": "a message",
  },
  {
    "1": "another message",
    "2": "my name is {foo}",
    "3": "I have {count, plural, one{a cat} other{many cats}}",
  },
]
`;

exports[`basic case: help 1`] = `
{
  "stderr": "",
  "stdout": "Usage: formatjs compile-folder [options] <folder> <outFolder>

Batch compile all extracted translation JSON files in <folder> to <outFolder> containing
react-intl consumable JSON. We also verify that the messages are
valid ICU and not malformed.

Options:
  --format <path>  Path to a formatter file that converts JSON files in \`<folder>\` to \`Record<string, string>\`
  so we can compile. The file must export a function named \`compile\` with the signature:
  \`\`\`
  type CompileFn = <T = Record<string, MessageDescriptor>>(
    msgs: T
  ) => Record<string, string>;
  \`\`\`
  This is especially useful to convert from a TMS-specific format back to react-intl format
  
  --ast            Whether to compile to AST. See
                   https://formatjs.io/docs/guides/advanced-usage#pre-parsing-messages
                   for more information
  -h, --help       display help for command
",
}
`;
